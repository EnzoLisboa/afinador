; Programa PIO para controlar LEDs WS2812
.program ws2812

.wrap_target
    out x, 1            ; Lê o próximo bit da cor (24 bits no total)
    jmp !x do_zero      ; Se o bit for 0, pula para do_zero
do_one:
    set pins, 1 [4]     ; Bit 1: Mantém o pino alto por ~0,8us (4 ciclos a 8MHz)
    jmp cont            ; Pula para continuar
do_zero:
    set pins, 1 [2]     ; Bit 0: Mantém o pino alto por ~0,4us (2 ciclos a 8MHz)
    set pins, 0 [2]     ; Mantém o pino baixo por ~0,8us (4 ciclos no total)
cont:
    set pins, 0 [1]     ; Mantém o pino baixo por ~0,2us (1 ciclo)
.wrap

% c-sdk {
static inline void ws2812ProgramInit(PIO pio, uint sm, uint offset, uint pin)
{
    // Obtém a configuração padrão para o programa PIO
    pio_sm_config config = ws2812_program_get_default_config(offset);

    // Define o pino de saída (usado pela instrução 'set')
    sm_config_set_set_pins(&config, pin, 1);

    // Inicializa o pino GPIO para uso pelo PIO
    pio_gpio_init(pio, pin);

    // Configura o pino como saída no PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Define o divisor de clock para 8MHz (cada bit do WS2812 precisa de 1,25us)
    float div = clock_get_hz(clk_sys) / 8000000.0;
    sm_config_set_clkdiv(&config, div);

    // Configura o FIFO para uso exclusivo de TX (envio de dados)
    sm_config_set_fifo_join(&config, PIO_FIFO_JOIN_TX);

    // Configura o deslocamento de saída: shift para a esquerda, autopull a cada 24 bits
    sm_config_set_out_shift(&config, false, true, 24);

    // Configura o comportamento do pino de saída: sticky (mantém o último valor)
    sm_config_set_out_special(&config, true, false, false);

    // Inicializa a máquina de estado (SM) com a configuração definida
    pio_sm_init(pio, sm, offset, &config);

    // Habilita a máquina de estado (SM)
    pio_sm_set_enabled(pio, sm, true);
}
%}